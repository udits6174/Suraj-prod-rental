// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

// +-------+       +----------+       +------+
// | User  |       | Booking  |       | Car  |
// +-------+       +----------+       +------+
// | id    |1    n | id       |n    1 | id   |
// | name  |<----->| userId   |<----->| make |
// | email |       | carId    |       | model|
// | ...   |       | startDate|       | year |
// |       |       | endDate  |       | ...  |
// +-------+       | status   |       +------+
//                 +----------+

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String    @id @default(cuid())
  name      String
  email     String    @unique
  password  String
  role      Role      @default(USER)
  bookings  Booking[] //all bookings of a user
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

enum Role {
  USER
  ADMIN
}

model Car {
  id          String    @id @default(cuid())
  maker       String
  model       String
  type        String  //vehicle type
  year        Int
  fare        Int
  transmission  Transmission @default(MANUAL)
  description String
  imageUrl    String
  available   Boolean   @default(true)
  bookings    Booking[] //all bookings of a car
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}
enum Transmission {
  MANUAL
  AUTO
}
model Booking {
  id        String   @id @default(cuid())
  startDate DateTime
  endDate   DateTime
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  car       Car      @relation(fields: [carId], references: [id])
  carId     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}